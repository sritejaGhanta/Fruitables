// ! function(n) {
//     "function" == typeof define && define.amd ? define(["jquery"], function(e) {
//         return n(e)
//     }) : "object" == typeof module && "object" == typeof module.exports ? exports = n(require("jquery")) : n(jQuery)
// }(function(n) {
//     function e(n) {
//         var e = 7.5625,
//             t = 2.75;
//         return n < 1 / t ? e * n * n : n < 2 / t ? e * (n -= 1.5 / t) * n + .75 : n < 2.5 / t ? e * (n -= 2.25 / t) * n + .9375 : e * (n -= 2.625 / t) * n + .984375
//     }
//     void 0 !== n.easing && (n.easing.jswing = n.easing.swing);
//     var t = Math.pow,
//         u = Math.sqrt,
//         r = Math.sin,
//         i = Math.cos,
//         a = Math.PI,
//         c = 1.70158,
//         o = 1.525 * c,
//         s = 2 * a / 3,
//         f = 2 * a / 4.5;
//     n.extend(n.easing, {
//         def: "easeOutQuad",
//         swing: function(e) {
//             return n.easing[n.easing.def](e)
//         },
//         easeInQuad: function(n) {
//             return n * n
//         },
//         easeOutQuad: function(n) {
//             return 1 - (1 - n) * (1 - n)
//         },
//         easeInOutQuad: function(n) {
//             return n < .5 ? 2 * n * n : 1 - t(-2 * n + 2, 2) / 2
//         },
//         easeInCubic: function(n) {
//             return n * n * n
//         },
//         easeOutCubic: function(n) {
//             return 1 - t(1 - n, 3)
//         },
//         easeInOutCubic: function(n) {
//             return n < .5 ? 4 * n * n * n : 1 - t(-2 * n + 2, 3) / 2
//         },
//         easeInQuart: function(n) {
//             return n * n * n * n
//         },
//         easeOutQuart: function(n) {
//             return 1 - t(1 - n, 4)
//         },
//         easeInOutQuart: function(n) {
//             return n < .5 ? 8 * n * n * n * n : 1 - t(-2 * n + 2, 4) / 2
//         },
//         easeInQuint: function(n) {
//             return n * n * n * n * n
//         },
//         easeOutQuint: function(n) {
//             return 1 - t(1 - n, 5)
//         },
//         easeInOutQuint: function(n) {
//             return n < .5 ? 16 * n * n * n * n * n : 1 - t(-2 * n + 2, 5) / 2
//         },
//         easeInSine: function(n) {
//             return 1 - i(n * a / 2)
//         },
//         easeOutSine: function(n) {
//             return r(n * a / 2)
//         },
//         easeInOutSine: function(n) {
//             return -(i(a * n) - 1) / 2
//         },
//         easeInExpo: function(n) {
//             return 0 === n ? 0 : t(2, 10 * n - 10)
//         },
//         easeOutExpo: function(n) {
//             return 1 === n ? 1 : 1 - t(2, -10 * n)
//         },
//         easeInOutExpo: function(n) {
//             return 0 === n ? 0 : 1 === n ? 1 : n < .5 ? t(2, 20 * n - 10) / 2 : (2 - t(2, -20 * n + 10)) / 2
//         },
//         easeInCirc: function(n) {
//             return 1 - u(1 - t(n, 2))
//         },
//         easeOutCirc: function(n) {
//             return u(1 - t(n - 1, 2))
//         },
//         easeInOutCirc: function(n) {
//             return n < .5 ? (1 - u(1 - t(2 * n, 2))) / 2 : (u(1 - t(-2 * n + 2, 2)) + 1) / 2
//         },
//         easeInElastic: function(n) {
//             return 0 === n ? 0 : 1 === n ? 1 : -t(2, 10 * n - 10) * r((10 * n - 10.75) * s)
//         },
//         easeOutElastic: function(n) {
//             return 0 === n ? 0 : 1 === n ? 1 : t(2, -10 * n) * r((10 * n - .75) * s) + 1
//         },
//         easeInOutElastic: function(n) {
//             return 0 === n ? 0 : 1 === n ? 1 : n < .5 ? -(t(2, 20 * n - 10) * r((20 * n - 11.125) * f)) / 2 : t(2, -20 * n + 10) * r((20 * n - 11.125) * f) / 2 + 1
//         },
//         easeInBack: function(n) {
//             return (c + 1) * n * n * n - c * n * n
//         },
//         easeOutBack: function(n) {
//             return 1 + (c + 1) * t(n - 1, 3) + c * t(n - 1, 2)
//         },
//         easeInOutBack: function(n) {
//             return n < .5 ? t(2 * n, 2) * (7.189819 * n - o) / 2 : (t(2 * n - 2, 2) * ((o + 1) * (2 * n - 2) + o) + 2) / 2
//         },
//         easeInBounce: function(n) {
//             return 1 - e(1 - n)
//         },
//         easeOutBounce: e,
//         easeInOutBounce: function(n) {
//             return n < .5 ? (1 - e(1 - 2 * n)) / 2 : (1 + e(2 * n - 1)) / 2
//         }
//     })
// });

function easeInQuad(n) {
  return n * n;
}

function easeOutQuad(n) {
  return 1 - (1 - n) * (1 - n);
}

function easeInOutQuad(n) {
  return n < 0.5 ? 2 * n * n : 1 - Math.pow(-2 * n + 2, 2) / 2;
}

function easeInCubic(n) {
  return n * n * n;
}

function easeOutCubic(n) {
  return 1 - Math.pow(1 - n, 3);
}

function easeInOutCubic(n) {
  return n < 0.5 ? 4 * n * n * n : 1 - Math.pow(-2 * n + 2, 3) / 2;
}

function easeInQuart(n) {
  return n * n * n * n;
}

function easeOutQuart(n) {
  return 1 - Math.pow(1 - n, 4);
}

function easeInOutQuart(n) {
  return n < 0.5 ? 8 * n * n * n * n : 1 - Math.pow(-2 * n + 2, 4) / 2;
}

function easeInQuint(n) {
  return n * n * n * n * n;
}

function easeOutQuint(n) {
  return 1 - Math.pow(1 - n, 5);
}

function easeInOutQuint(n) {
  return n < 0.5 ? 16 * n * n * n * n * n : 1 - Math.pow(-2 * n + 2, 5) / 2;
}

function easeInSine(n) {
  return 1 - Math.cos((n * Math.PI) / 2);
}

function easeOutSine(n) {
  return Math.sin((n * Math.PI) / 2);
}

function easeInOutSine(n) {
  return -(Math.cos(Math.PI * n) - 1) / 2;
}

function easeInExpo(n) {
  return n === 0 ? 0 : Math.pow(2, 10 * n - 10);
}

function easeOutExpo(n) {
  return n === 1 ? 1 : 1 - Math.pow(2, -10 * n);
}

function easeInOutExpo(n) {
  if (n === 0) return 0;
  if (n === 1) return 1;
  return n < 0.5
    ? Math.pow(2, 20 * n - 10) / 2
    : (2 - Math.pow(2, -20 * n + 10)) / 2;
}

function easeInCirc(n) {
  return 1 - Math.sqrt(1 - Math.pow(n, 2));
}

function easeOutCirc(n) {
  return Math.sqrt(1 - Math.pow(n - 1, 2));
}

function easeInOutCirc(n) {
  return n < 0.5
    ? (1 - Math.sqrt(1 - Math.pow(2 * n, 2))) / 2
    : (Math.sqrt(1 - Math.pow(-2 * n + 2, 2)) + 1) / 2;
}

function easeInElastic(n) {
  const c = 1.70158;
  const d = 1.525 * c;
  const s = (2 * Math.PI) / 3;
  return n === 0
    ? 0
    : n === 1
    ? 1
    : -Math.pow(2, 10 * n - 10) * Math.sin((10 * n - 10.75) * s);
}

function easeOutElastic(n) {
  const c = 1.70158;
  const d = 1.525 * c;
  const s = (2 * Math.PI) / 3;
  return n === 0
    ? 0
    : n === 1
    ? 1
    : Math.pow(2, -10 * n) * Math.sin((10 * n - 0.75) * s) + 1;
}

function easeInOutElastic(n) {
  const c = 1.70158;
  const d = 1.525 * c;
  const f = (2 * Math.PI) / 4.5;
  if (n === 0) return 0;
  if (n === 1) return 1;
  return n < 0.5
    ? -(Math.pow(2, 20 * n - 10) * Math.sin((20 * n - 11.125) * f)) / 2
    : (Math.pow(2, -20 * n + 10) * Math.sin((20 * n - 11.125) * f)) / 2 + 1;
}

function easeInBack(n) {
  const c = 1.70158;
  return c * n * n * n - c * n * n;
}

function easeOutBack(n) {
  const c = 1.70158;
  return 1 + (c + 1) * Math.pow(n - 1, 3) + c * Math.pow(n - 1, 2);
}

function easeInOutBack(n) {
  const c = 1.70158;
  return n < 0.5
    ? (Math.pow(2 * n, 2) * ((7.189819 * n - c) / (2.70158 * c))) / 2
    : (Math.pow(2 * n - 2, 2) * ((c + 1) * (2 * n - 2) + c) + 2) / 2;
}

function easeInBounce(n) {
  return 1 - easeOutBounce(1 - n);
}

function easeOutBounce(n) {
  const e = 7.5625;
  const t = 2.75;
  if (n < 1 / t) return e * n * n;
  if (n < 2 / t) return e * (n -= 1.5 / t) * n + 0.75;
  if (n < 2.5 / t) return e * (n -= 2.25 / t) * n + 0.9375;
  return e * (n -= 2.625 / t) * n + 0.984375;
}

function easeInOutBounce(n) {
  return n < 0.5 ? easeInBounce(n * 2) / 2 : easeOutBounce(n * 2 - 1) / 2 + 0.5;
}
